# -*- coding: utf-8 -*-
"""ann_project_dl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UXv5zw9AN7lCXLL6kft0ulr2ApJu2BZP

# part-1 Data preprocessing
"""

# Importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#importing dataset
dataset=pd.read_csv('/content/Churn_Modelling.csv')
X=dataset.iloc[:,3:13]
y=dataset.iloc[:,13]

#Create dummy variables
geography=pd.get_dummies(X["Geography"],drop_first=True)
gender=pd.get_dummies(X['Gender'],drop_first=True)

# Concatenate the data frames

X=pd.concat([X,geography,gender],axis=1)

#Drop Unnecessary columns
X=X.drop(['Geography','Gender'],axis=1)

# Spliting the dataset into the training set and test set
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)

#Feature scalling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

"""Part-2 Now lets make the ANN

"""

#Importing the keras libraries and packages
import keras
from keras.models import Sequential #Sequential will initialize the neural network
from keras.layers import Dense #dense will build the hidden layer
#from keras.layers import LeakyReLU,PReLU,ELU
from keras.layers import Dropout

#Initialising the ANN
classifier=Sequential()

#Adding the input layer and the first hidden layer
classifier.add(Dense(units=6,kernel_initializer='he_uniform',activation='relu',input_dim=11))

#Adding the second hidden layer
classifier.add(Dense(units=6,kernel_initializer='he_uniform',activation='relu'))

#Adding the output layer
classifier.add(Dense(units=1,kernel_initializer='glorot_uniform',activation='sigmoid'))

#Compiling the ANN
classifier.compile(optimizer='adamax',loss='binary_crossentropy',metrics=['accuracy'])

#Fitting the ANNto the Training set
model_history=classifier.fit(X_train,y_train,validation_split=0.32,batch_size=10,epochs=50)

# List all data in history
print(model_history.history.keys())

#Summarize history for accuracy
plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()

#Summarize history for loss
plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()

"""Part-3 Making the predictions and evaluating the model"""

#Predicting the Test set results
y_pred=classifier.predict(X_test)
y_pred=(y_pred>0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
print(cm)

#Calculate the accuracy
from sklearn.metrics import accuracy_score
score=accuracy_score(y_pred,y_test)
print(score)

